*********************************************  Java Trainning for tester *******************************************************************




1/ class ==> Collection of variables and methods
2/ main() ==> Method can be present in same class
3/ main()  ==> CMethod can be present in separate class

***** Data Type in java:
1/ Primitive data type: int / double / char / boolean / short / float ...
2/ Derived data type: string / Array / ArrayList / Hashmap

int x = 10;
float x = 10.5;
double x = 10.555555;
char x = 'y';
string s = "Hello";

Variables
int x ==>  Declaration
int y, x ==> Declaration

x = 10; ==> initialization

******* Operators in java
10 + 30 
+ ==> Operator

**/ Relational operators
== <> <= >= !=

**/ Conditional statement
loops / iterative statement / Jum statement

**************************************************************************

// * Part 1 * //

oop ===> Object Oriented Programming 

Object ==> Is an instance of a class
Method ==> Block of code witch contain a logic

1/ class ==> Collection of variables and methods
2/ main() ==> Method can be present in same class
3/ main()  ==> Method can be present in separate class

/* class variable */

We can assign values to variables in 3 ways:

1/ By using refrence variable
2/ By using method
3/ By using constructor

/* Methods */ ==> block of code
1/ case - 1:  Not taking parameters and also not returned any value
2/ case - 2 : Not taking parameters but returning value
3/ case - 3 : Taking parameters but not returned a value
4/ case - 4 : Taking parameters and also returning a value


/* Constructor */

Type of constructor:
1/ Default constructor
2/Parametrized constructor

Def:
1/ A special type method
2/ Used for initializing the class
3/Name should be same as class name
4/Will not return any value
5/ Will be invokeat the time of object creation


/ Method VS Constructor /
- The pupose of a method is to perform a task by executing java code
- The purose of constructor is to initialize the object of class


************************************

/* Part 2*/

- Overloading
- This keyword
- static variable and static method

/* Overloading */

Creating methods /Constructor with the same name, with different parameters.

Advantages:
- Save memory
- Save time

1/ Number of parameters
2/ Data type of parameters 


/* this keyword */
usage of java this keyword

1/this can be used to refer current class instance variable
2/ this can be used to invoke current class method
3/ this() can be used to invoke current class constructor
4/ this can be passed as an argument in method call
5/ this can be passed as an argument in constructor call
6/ this can be used to return the caurrent class instance from method

/* static variable and static method */

static ===> applicable for variable and methods

* static method
* static variable

1/ static method can access only static stuff (directly) ==> without create an object
2/ static method can also access non static stuff but through object
3/ non static methods can access both static and non static stuff direct ===> True


//* Part 3 *//

- Java Inheritance 
- Method Overriding
- super keyword
- final keyword


/* Java Inheritance  */
Acquiring all the properties from one class to another class is called inheritance.

 5 Types of inheritance:

1/ Single
2/ Multilvel
3/ Hierrachical
4/ Multiple
5/ Hybrid


/* Method Overriding */

Rewrite the method in child classes:
1/ Method difinition should be same
2/Body should be changed


Overloding                                                                            VS                          Overriding 
1/change the didinition of method(number and data of parameters should be different)                       1/ we don't change the definition
                                                                                                           2/ we should change only the body

/* super keyword */
==> use in inheritance 
1/ super can be used to refer immediate parent class instance variable
2/ super can be used to invoke immediate parent class method
3/ super() can be used to invoke immediate parent class constructor

/* final */

variable ==> you cannot change the value of the variable
Method ==> you cannot be ovveride in the child class
Class ==> class you cannot be extend into another class


//* part 4 *//

* Hybrid Inheritance
* Mutiple Inheritance

- Java interface
- Java package
- Access modifier's

/* Interface */

- An interface in java is a blue print of class
- Interface contains final and static variables
- Interface contains abstract method
==> An abstract method is a method contains definition but not body
- Method in interface are public by default
- Interface supports the functionnality of multiple inheritance
- We can define interface with interface keyord
- A class extends another class, an interface extends another interface but a class implement an interface
- We can create object refence for interface but we cannot instantiate interface


/* Java package */
package is a collection of classes  interfaces / files ....
import ==> is a command

 2 types of packages:
1/ User defined packages (created by us)
2/ Build in packages


/* Access modifier's */

Access modifier's: Define the scope of variables and methods.

1/ public
2/ protected
3/ default
4/ private

* private: The private access modifier's is accessible only within class
* default: If you don't use any modifier's, it is treated as default by default.
           The default modifier is accessible only within package.

*  protected: The protected access modifier is accessible within package and outside the package but through inheritance
* public: we can acess everywhere


****************************************

//* part 5 *//


Exception Handling

Exception is an abnormal condition
In java, exception s an event that disput the normal flow of the program.

2 Types of exception:

1/ Checked exception: Identified by the compiler
Examples:
- InterruptedException
- IOException
- FileNotFoundException

2/ Inchecked exception: which are not checked / not identified by the compiler

Examples:
- ArithmeticException
- NullPointerException
- ArrayIndexOutPutOfBundException


//* part 6 *//

- ArrayList
- Hashmap
- JDBC

/* Array list */

Array list ==> We can store any number and type of element.

int a[] = new a[5] ==> simple array
Limitations:
- We cannot store more then 5 element
- We cannot store multiple type of element (int)


Operations on array liste:

- How to declare arraylist
- How to add lement / values to arraylist
- Find size of arraylist
- Read value from arraylist
- Remove element / value from arraylist
- Insert a new element in the middle of arraylist






























